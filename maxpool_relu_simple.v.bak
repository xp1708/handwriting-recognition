module maxpool_relu_simple #(
    parameter CONV_BIT = 12
)(
    input clk,
    input rst_n,
    input valid_in,
    input signed [CONV_BIT-1:0] conv_out_1, conv_out_2, conv_out_3,
    output reg [CONV_BIT-1:0] max_value_1, max_value_2, max_value_3,
    output reg valid_out_relu
);

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            max_value_1 <= 0;
            max_value_2 <= 0;
            max_value_3 <= 0;
            valid_out_relu <= 0;
        end else begin
            if (valid_in) begin
                // max-pooling 2 inputs + ReLU
                max_value_1 <= (conv_out_1 > conv_out_2 ? conv_out_1 : conv_out_2);
                max_value_2 <= (conv_out_2 > conv_out_3 ? conv_out_2 : conv_out_3);
                max_value_3 <= (conv_out_3 > conv_out_1 ? conv_out_3 : conv_out_1);

                // Apply ReLU
                if (max_value_1 < 0) max_value_1 <= 0;
                if (max_value_2 < 0) max_value_2 <= 0;
                if (max_value_3 < 0) max_value_3 <= 0;

                valid_out_relu <= 1;
            end else begin
                valid_out_relu <= 0;
            end
        end
    end

endmodule
