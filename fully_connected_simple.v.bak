module fully_connected_simple #(parameter INPUT_NUM = 48, OUTPUT_NUM = 10, DATA_BITS = 8) (
    input clk,
    input rst_n,
    input valid_in,
    input signed [11:0] data_in_1, data_in_2, data_in_3,
    output [11:0] data_out,
    output reg valid_out_fc
);

    localparam INPUT_WIDTH = 16;

    reg state;
    reg [5:0] buf_idx;
    reg [3:0] out_idx;
    reg signed [13:0] buffer [0:INPUT_NUM - 1];
    reg signed [DATA_BITS - 1:0] weight [0:INPUT_NUM * OUTPUT_NUM - 1];
    reg signed [DATA_BITS - 1:0] bias [0:OUTPUT_NUM - 1];

    integer i;
    reg signed [19:0] sum;

    // Sign-extend inputs
    wire signed [13:0] data_ext_1 = (data_in_1[11]) ? {2'b11, data_in_1} : {2'b00, data_in_1};
    wire signed [13:0] data_ext_2 = (data_in_2[11]) ? {2'b11, data_in_2} : {2'b00, data_in_2};
    wire signed [13:0] data_ext_3 = (data_in_3[11]) ? {2'b11, data_in_3} : {2'b00, data_in_3};

    initial begin
        $readmemh("fc_weight.txt", weight);
        $readmemh("fc_bias.txt", bias);
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_out_fc <= 0;
            buf_idx <= 0;
            out_idx <= 0;
            state <= 0;
        end else begin
            valid_out_fc <= 0;
            if (valid_in) begin
                if (!state) begin
                    buffer[buf_idx] <= data_ext_1;
                    buffer[INPUT_WIDTH + buf_idx] <= data_ext_2;
                    buffer[INPUT_WIDTH * 2 + buf_idx] <= data_ext_3;
                    buf_idx <= buf_idx + 1;
                    if (buf_idx == INPUT_WIDTH - 1) begin
                        buf_idx <= 0;
                        state <= 1;
                        valid_out_fc <= 1;
                    end
                end else begin
                    out_idx <= (out_idx == OUTPUT_NUM - 1) ? 0 : out_idx + 1;
                    valid_out_fc <= 1;
                end
            end
        end
    end

    always @(*) begin
        sum = 0;
        for (i = 0; i < INPUT_NUM; i = i + 1) begin
            sum = sum + weight[out_idx * INPUT_NUM + i] * buffer[i];
        end
    end

    assign data_out = (sum + bias[out_idx]) >>> 7;

endmodule